#!/bin/bash
# Site permissions manager - actual implementation (runs as root)
# Called by: site wrapper script via doas
# Usage: site-permissions <domain> <--readonly|--writable>

if [ "$#" -ne 2 ]; then
    echo "Error: Invalid arguments"
    echo "Usage: site-permissions <domain> <--readonly|--writable>"
    exit 1
fi

DOMAIN="$1"
ACTION="$2"

# Validate domain exists
if [ ! -d "/sites/$DOMAIN" ]; then
    echo "Error: Domain directory /sites/$DOMAIN does not exist"
    exit 1
fi

# Function to find web root
find_web_root() {
    local domain=$1
    local web_root=""

    # Check nginx config first
    if [ -f "/sites/$domain/config/nginx.conf" ]; then
        local nginx_roots=$(grep -E '^\s*root\s+' "/sites/$domain/config/nginx.conf" | \
                           grep -v '#' | \
                           sed 's/^\s*root\s*//;s/;\s*$//' | \
                           tr -d '"' | tr -d "'")

        for root in $nginx_roots; do
            case "$root" in
                /var/www/*|/usr/share/nginx/*) continue ;;
            esac
            if [[ "$root" == "/sites/$domain/"* ]] && [ -d "$root" ]; then
                web_root="$root"
                break
            fi
        done
    fi

    # Fallback to common paths
    if [ -z "$web_root" ]; then
        for check_path in \
            "/sites/$domain/htdocs" \
            "/sites/$domain/public" \
            "/sites/$domain/public_html" \
            "/sites/$domain/www" \
            "/sites/$domain/app" \
            "/sites/$domain/web" \
            "/sites/$domain/veebiplatvorm/web" \
            "/sites/$domain/veebiplatform/web"; do
            if [ -d "$check_path" ]; then
                web_root="$check_path"
                break
            fi
        done
    fi

    # Last resort: find by index file
    if [ -z "$web_root" ]; then
        for dir in /sites/$domain/*/; do
            if [ -f "$dir/index.php" ] || [ -f "$dir/index.html" ] || [ -f "$dir/index.js" ]; then
                web_root="${dir%/}"
                break
            fi
        done
    fi

    echo "$web_root"
}

# Get web root
WEB_ROOT=$(find_web_root "$DOMAIN")

if [ -z "$WEB_ROOT" ] || [ ! -d "$WEB_ROOT" ]; then
    echo "Error: Could not find web root for domain: $DOMAIN"
    exit 1
fi

# Get correct user (owner of the domain directory)
SITE_USER=$(stat -c '%U' "/sites/$DOMAIN")

# Function to set permissions
set_permissions() {
    local mode=$1  # readonly or writable

    echo "========================================="
    if [ "$mode" = "readonly" ]; then
        echo "Setting $DOMAIN to READ-ONLY mode"
    else
        echo "Setting $DOMAIN to WRITABLE mode"
    fi
    echo "========================================="
    echo "Web root: $WEB_ROOT"
    echo "Owner: $SITE_USER:nginx"
    echo ""

    # Fix ownership for entire site directory (not just web root)
    echo "→ Ensuring correct ownership ($SITE_USER:nginx) for entire site..."
    find "/sites/$DOMAIN" \( ! -user "$SITE_USER" -o ! -group nginx \) -exec chown "$SITE_USER:nginx" {} +

    # Set base permissions for entire site directory (excluding web root which gets special handling)
    echo "→ Securing site directory structure..."
    if [ "$mode" = "readonly" ]; then
        # Set restrictive permissions on entire site (web root will be overridden later)
        chmod -R u=r,u+X,g=r,g+X,o= "/sites/$DOMAIN"
        # Add setgid only to directories
        find "/sites/$DOMAIN" -type d -exec chmod g+s {} +
    else
        # Set writable permissions on entire site (web root will be overridden later)
        chmod -R u=rw,u+X,g=r,g+X,o= "/sites/$DOMAIN"
        # Add setgid only to directories
        find "/sites/$DOMAIN" -type d -exec chmod g+s {} +
    fi

    if [ "$mode" = "readonly" ]; then
        # Count files and directories for progress indication
        echo "→ Analyzing web root..."
        DIR_COUNT=$(find "$WEB_ROOT" -type d 2>/dev/null | wc -l)
        FILE_COUNT=$(find "$WEB_ROOT" -type f 2>/dev/null | wc -l)
        echo "   Found $DIR_COUNT directories"
        echo "   Found $FILE_COUNT files"

        # Set read-only permissions
        echo "→ Setting read-only permissions..."
        if [ $DIR_COUNT -gt 1000 ] || [ $FILE_COUNT -gt 5000 ]; then
            echo "   Large site detected, this may take a moment..."
        fi

        echo "   Setting permissions recursively (dirs: 2550, files: 440)"
        # u=r,g=r,o= sets read for user/group, nothing for others
        # u+X,g+X adds execute only to directories
        chmod -R u=r,u+X,g=r,g+X,o= "$WEB_ROOT"
        # Add setgid only to directories
        find "$WEB_ROOT" -type d -exec chmod g+s {} +

        # Apply exceptions from readwritedirectories.txt
        if [ -f "/sites/$DOMAIN/config/readwritedirectories.txt" ]; then
            echo "→ Applying write exceptions..."
            EXCEPTION_COUNT=0
            while IFS= read -r dir; do
                echo "$dir" | grep -q '^#' && continue
                [ -z "$dir" ] && continue

                case "$dir" in
                    /*) check_dir="$dir" ;;
                    *) check_dir="$WEB_ROOT/$dir" ;;
                esac

                if [ -d "$check_dir" ]; then
                    EXCEPTION_COUNT=$((EXCEPTION_COUNT + 1))
                    echo "   Keeping writable: $dir"
                    chmod -R u=rw,u+X,g=r,g+X,o= "$check_dir"
                    find "$check_dir" -type d -exec chmod g+s {} +
                fi
            done < "/sites/$DOMAIN/config/readwritedirectories.txt"
            if [ $EXCEPTION_COUNT -gt 0 ]; then
                echo "   Applied $EXCEPTION_COUNT exception directories"
            fi
        fi

        echo ""
        echo "✅ Site is now READ-ONLY"
        echo "   Directories: 2550 (r-xr-s---)"
        echo "   Files: 440 (r--r-----)"
    else
        # Count files and directories for progress indication
        echo "→ Analyzing web root..."
        DIR_COUNT=$(find "$WEB_ROOT" -type d 2>/dev/null | wc -l)
        FILE_COUNT=$(find "$WEB_ROOT" -type f 2>/dev/null | wc -l)
        echo "   Found $DIR_COUNT directories"
        echo "   Found $FILE_COUNT files"

        # Set writable permissions
        echo "→ Setting writable permissions..."
        if [ $DIR_COUNT -gt 1000 ] || [ $FILE_COUNT -gt 5000 ]; then
            echo "   Large site detected, this may take a moment..."
        fi

        echo "   Setting permissions recursively (dirs: 2750, files: 640)"
        # u=rw,g=r,o= sets read/write for user, read for group, nothing for others
        # u+X,g+X adds execute only to directories
        chmod -R u=rw,u+X,g=r,g+X,o= "$WEB_ROOT"
        # Add setgid only to directories
        find "$WEB_ROOT" -type d -exec chmod g+s {} +

        # WordPress special handling
        if [ -f "$WEB_ROOT/wp-config.php" ]; then
            echo "→ WordPress detected, applying enhanced permissions..."
            WP_ENHANCED=0
            for wp_dir in wp-content wp-content/uploads wp-content/themes wp-content/plugins wp-content/upgrade; do
                if [ -d "$WEB_ROOT/$wp_dir" ]; then
                    WP_ENHANCED=$((WP_ENHANCED + 1))
                    echo "   Enhanced permissions for: $wp_dir"
                    # Both user and group get full read/write, X adds execute for directories only
                    chmod -R u=rw,u+X,g=rw,g+X,o= "$WEB_ROOT/$wp_dir"
                    find "$WEB_ROOT/$wp_dir" -type d -exec chmod g+s {} +
                fi
            done
            chmod 640 "$WEB_ROOT/wp-config.php"
            echo "   Applied enhanced permissions to $WP_ENHANCED WordPress directories"
        fi

        # Drupal special handling
        if [ -f "$WEB_ROOT/sites/default/settings.php" ] || [ -f "$WEB_ROOT/core/lib/Drupal.php" ]; then
            echo "→ Drupal detected, applying enhanced permissions..."
            DRUPAL_ENHANCED=0
            for drupal_dir in sites/default/files modules themes; do
                if [ -d "$WEB_ROOT/$drupal_dir" ]; then
                    DRUPAL_ENHANCED=$((DRUPAL_ENHANCED + 1))
                    echo "   Enhanced permissions for: $drupal_dir"
                    # Both user and group get full read/write, X adds execute for directories only
                    chmod -R u=rw,u+X,g=rw,g+X,o= "$WEB_ROOT/$drupal_dir"
                    find "$WEB_ROOT/$drupal_dir" -type d -exec chmod g+s {} +
                fi
            done
            echo "   Applied enhanced permissions to $DRUPAL_ENHANCED Drupal directories"
        fi

        echo ""
        echo "✅ Site is now WRITABLE"
        echo "   Directories: 2750 (rwxr-s---)"
        echo "   Files: 640 (rw-r-----)"
        if [ -f "$WEB_ROOT/wp-config.php" ]; then
            echo "   WordPress dirs: 2770 (rwxrws---)"
            echo "   WordPress files: 660 (rw-rw----)"
        fi
        echo ""
        echo "⚠  IMPORTANT: Run 'site --readonly' when updates are complete!"
        echo ""
        echo "You can now:"
        echo "  • Update CMS core"
        echo "  • Install/update plugins or modules"
        echo "  • Upload media files"
        echo "  • Modify configuration files"
    fi
}

# Execute based on action
case "$ACTION" in
    --readonly)
        set_permissions "readonly"
        ;;
    --writable)
        set_permissions "writable"
        ;;
    *)
        echo "Error: Invalid action: $ACTION"
        echo "Use --readonly or --writable"
        exit 1
        ;;
esac